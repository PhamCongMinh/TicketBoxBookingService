version: '3.8'

services:
  zoo1:
    image: confluentinc/cp-zookeeper:7.3.2
    hostname: zoo1
    container_name: zoo1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo1:2888:3888
    networks:
      - ticket-box

  kafka1:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka1
    container_name: kafka1
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - zoo1
    networks:
      - ticket-box

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8080:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: kafka1
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka1:19092
      KAFKA_CLUSTERS_0_METRICS_PORT: 9999
      SERVER_SERVLET_CONTEXT_PATH: /kafkaui
      AUTH_TYPE: "LOGIN_FORM"
      SPRING_SECURITY_USER_NAME: admin
      SPRING_SECURITY_USER_PASSWORD: pass
    depends_on:
      - zoo1
      - kafka1
    networks:
      - ticket-box

#  kafka-schema-registry:
#    image: confluentinc/cp-schema-registry:7.3.2
#    hostname: kafka-schema-registry
#    container_name: kafka-schema-registry
#    depends_on:
#      - zoo1
#      - kafka1
#    ports:
#      - "8081:8081"
#    environment:
#      SCHEMA_REGISTRY_HOST_NAME: kafka-schema-registry
#      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'PLAINTEXT://kafka1:19092,PLAINTEXT://kafka2:19093,PLAINTEXT://kafka3:19094'
#      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  app:
    image: openjdk:17-jdk-slim
    container_name: ${SPRING_APPLICATION_NAME}
    ports:
      - "${SERVER_PORT}:${SERVER_PORT}"
    env_file:
      - .env
    volumes:
      - ./target/${JAR_FILE}:/app/${JAR_FILE}
    restart: always
    working_dir: /app
    command: [ "java", "-jar", "${JAR_FILE}" ]
    depends_on:
      - db
      - zoo1
      - kafka1
      - kafka-ui
      - redis
#      - kafka-schema-registry
    networks:
      - ticket-box

  db:
    image: postgres:15.3
    container_name: postgres
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${SPRING_DATASOURCE_USERNAME}
      - POSTGRES_PASSWORD=${SPRING_DATASOURCE_PASSWORD}
      - INIT
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    depends_on:
      - zoo1
      - kafka1
      - kafka-ui
    networks:
      - ticket-box

  redis:
    image: redis:6.2-alpine
    container_name: redis
    ports:
      - '${SPRING_REDIS_PORT}:${SPRING_REDIS_PORT}'
    command: redis-server --save 20 1 --loglevel warning --port ${SPRING_REDIS_PORT}
    volumes:
      - redis_data:/data
    networks:
      - ticket-box

volumes:
  db_data:
  redis_data:

networks:
  ticket-box:

